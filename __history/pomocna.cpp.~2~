//---------------------------------------------------------------------------

#pragma hdrstop

#include "pomocna.h"


void Tacka::Crtaj(TImage *image) const {
    image->Canvas->Ellipse(x-3,y-3,x+3,y+3);
}

bool operator<(Tacka A, Tacka B) {
	if(A.x < B.x)
	  return true;
	if(A.x == B.x)
	  return A.y < B.y;
	return false;
}

bool operator==(Tacka A, Tacka B) {
  return A.x == B.x && A.y == B.y;
}

bool operator==(Duz A, Duz B) {
  return A.pocetna == B.pocetna && A.krajnja == B.krajnja;
}

void iscrtajPoligon(vector<Tacka> &poligon, TImage *image) {
  image->Canvas->MoveTo(poligon[poligon.size()-1].x,poligon[poligon.size()-1].y);
  for(int i=0;i<poligon.size();i++)
    image->Canvas->LineTo(poligon[i].x,poligon[i].y);
}

int Orijentacija(Tacka A, Tacka B, Tacka C) {

	int P = A.x * (B.y - C.y) + B.x * (C.y - A.y) + C.x * (A.y - B.y);
	if(P > 0)
	  return -1;
	if(P < 0)
	  return 1;
	return 0;

}

void Duz::Crtaj(TImage *slika) const {
	pocetna.Crtaj(slika);
	krajnja.Crtaj(slika);
	slika->Canvas->MoveTo(pocetna.x,pocetna.y);
    slika->Canvas->LineTo(krajnja.x,krajnja.y);
}

//1 za presjek
//0 ako nema presjeka
int DaLiPresjekDuzi(Duz p, Duz q) {
   int or1 = Orijentacija(p.pocetna,p.krajnja,q.pocetna);
   int or2 = Orijentacija(p.pocetna,p.krajnja,q.krajnja);
   int or3 = Orijentacija(q.pocetna,q.krajnja,p.pocetna);
   int or4 = Orijentacija(q.pocetna,q.krajnja,p.krajnja);

   if( or1 * or2 < 0 && or3 * or4 < 0)
	 return 1;
   return 0;
}


Tacka TackaPresjekaPravih(Duz p, Duz q) {
	double a1 = p.krajnja.y - p.pocetna.y;
	double b1 = p.pocetna.x - p.krajnja.x;
	double c1 = a1*(p.pocetna.x) + b1*(p.pocetna.y);

	double a2 = q.krajnja.y - q.pocetna.y;
	double b2 = q.pocetna.x - q.krajnja.x;
	double c2 = a2*(q.pocetna.x) + b2*(q.pocetna.y);

    double determinant = a1*b2 - a2*b1;

    if (determinant == 0)
    {
        return Tacka(INT_MAX, INT_MAX);
    }
    else
    {
        double x = (b2*c1 - b1*c2)/determinant;
		double y = (a1*c2 - a2*c1)/determinant;
        return Tacka(x, y);
    }
}

bool daLiJeTackaUnutarTrougla(Tacka P, Trougao t) {
	if(Orijentacija(t.A,t.B,P) == Orijentacija(t.B,t.C,P) &&
	   Orijentacija(t.B,t.C,P) == Orijentacija(t.C,t.A,P))
		 return true;
	return false;
}

void Trougao::Crtaj(TImage *image) const {
	image->Canvas->MoveTo(A.x,A.y);
	image->Canvas->LineTo(B.x,B.y);
	image->Canvas->LineTo(C.x,C.y);
	image->Canvas->LineTo(A.x,A.y);
}
//---------------------------------------------------------------------------
#pragma package(smart_init)

